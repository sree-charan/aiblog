from flask import Flask, render_template, request
import httplib2
from googleapiclient import discovery
import google.generativeai as genai
import requests
from oauth2client.client import flow_from_clientsecrets
from oauth2client.file import Storage
from oauth2client.tools import run_flow

app = Flask(__name__)

# Pexels API credentials
PEXELS_API_KEY = "YOUR_PEXELS_API_KEY"
# Configure the API key for the GenAI model
GOOGLE_API_KEY = "GEMINI_API_KEY"
CLIENT_SECRET = 'config.json'
BLOG_ID = 'YOUR_BLOG_ID'
SCOPE = 'https://www.googleapis.com/auth/blogger'
STORAGE = Storage('credentials.storage')
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# Start the OAuth flow to retrieve credentials
def authorize_credentials():
    # Fetch credentials from storage
    credentials = STORAGE.get()
    # If the credentials doesn't exist in the storage location then run the flow
    if credentials is None or credentials.invalid:
        flow = flow_from_clientsecrets(CLIENT_SECRET, scope=SCOPE)
        http = httplib2.Http()
        credentials = run_flow(flow, STORAGE, http=http)
    return credentials

def getBloggerService():
    credentials = authorize_credentials()
    http = credentials.authorize(httplib2.Http())
    discoveryUrl = ('https://blogger.googleapis.com/$discovery/rest?version=v3')
    service = discovery.build('blogger', 'v3', http=http, discoveryServiceUrl=discoveryUrl)
    return service

def postToBlogger(payload):
    service = getBloggerService()
    post = service.posts()
    insert = post.insert(blogId='BLOG_ID', body=payload).execute()
    print("Done with the post!")
    print("Blog post link: ", insert['url'])
    print("Blog post id: ", insert['id'])
    return insert

def buildHtml(genOutput, imageUrl):
    html = f'''
    <div class="separator" style="clear: both; text-align: center;">
        <span style="font-size: large;">
            <a href="{imageUrl}" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">
                <img border="0" data-original-height="650" data-original-width="940" height="320" src="{imageUrl}" width="462" />
            </a>
        </span>
    </div>
    <span style="font-size: large;"><br></span>
    <br>
    <span style="font-size: large;">{genOutput}</span>
    <br>
    '''
    return html

def generateTitle(title):
    prompt = '''Generate an attractive title for a blog post based on the user-provided title:''' + title + '''\nOutput: A catchy and engaging title that captures the essence of the blog post and attracts readers' attention. The title should be unique, creative, and relevant to the user provided title. You should only generate one title for the blog post.'''
    response = model.generate_content(prompt)
    output = response.text.replace('* **', '').replace('*', '')
    return output

def generateGeminiContent(title):
    prompt = '''Generate a high-quality blog post for the title: ''' + title + ''' in 1000 words. The content generated should use simple words that even a 4 year old can understand. The title generated by AI is:'''
    response = model.generate_content(prompt)
    output = response.text.replace('* **', '').replace('*', '')
    return output

def generateKeywords(geminiContent):
    prompt = geminiContent + '''From the given blog post content, you are required to give two main keywords as output. Format of the output should be: keyword1, keyword2'''
    response = model.generate_content(prompt)
    output = response.text.replace('* **', '').replace('*', '')
    return output

def fetch_image_url(keyword1):
    url = f"https://api.pexels.com/v1/search?query={keyword1}&per_page=1"
    headers = {
        "Authorization": PEXELS_API_KEY
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        if data["photos"]:
            image_url = data["photos"][0]["src"]["large"]
            print(f"Image URL for '{keyword1}': {image_url}")
            return image_url
        else:
            print(f"No image found for '{keyword1}'")
    else:
        print(f"Error fetching image for '{keyword1}': {response.status_code}")
    return None

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        title = request.form['title']
        genTitle = generateTitle(title)
        genOutput = generateGeminiContent(title)
        Keyword = generateKeywords(genOutput)
        keyword1 = Keyword.split(",")[0]
        image_url = fetch_image_url(keyword1)
        payload = {
            "content": buildHtml(genOutput, image_url),
            "title": genTitle,
            'labels': [keyword1],
            'customMetaData': genTitle
        }
        genLink = postToBlogger(payload)
        return render_template('index.html', genTitle=genTitle, genOutput=genOutput, genLink=genLink.get('url'))
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)